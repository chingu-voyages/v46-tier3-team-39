// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//remember to use npm run prisma
// npx prisma generate
generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")  
}

type QuestionData{
  title String 
  description String 
}

type AnswerData{
  answer String
}

type LikeCounter {
  likes Int
  dislikes Int
}

model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  creatorId String
  questionType String
  tags String[]
  question QuestionData
  answer AnswerData
  dateCreated   DateTime @default(now())
  likeCounter LikeCounter
}

model QuestionLikes {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    dateCreated   DateTime @default(now())
    userId String @unique @db.ObjectId
    questionId String @unique @db.ObjectId
}

model Quiz {
  id    String                           @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  tags   String
  likes Int
  creatorId String @unique @db.ObjectId
  questionIds String[]
  dateCreated   DateTime @default(now())
}

model QuizLikes {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    dateCreated   DateTime @default(now())
    userId String @unique @db.ObjectId
    questionId String @unique @db.ObjectId
}

model Submissions {
   id            String  @id @default(auto()) @map("_id") @db.ObjectId
   time          DateTime @default(now())
   score         Int
   dateCreated   DateTime @default(now())
   userId String @unique @db.ObjectId
   quizId String @unique @db.ObjectId
}

model UserCredentials{
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  email String  @unique
  password String?
  provider String
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId 
  userId             String  @unique @db.ObjectId
  /// @TypeGraphQL.omit(output: true)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId 
  name          String
  email String  @unique
  usersReached Int @default(0)
  dateCreated   DateTime @default(now())
  emailVerified DateTime?
  image String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}