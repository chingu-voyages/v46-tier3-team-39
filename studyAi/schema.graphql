# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  access_token: String
  expires_at: Int
  id: String!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  user: User!
  userId: String!
}

type AccountAvgAggregate {
  expires_at: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
}

type AccountCountAggregate {
  _all: Int!
  access_token: Int!
  expires_at: Int!
  id: Int!
  id_token: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  access_token: String
  expires_at: Int
  id: String!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: String
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: String
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  expires_at
  id
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  access_token: StringNullableWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
  expires_at: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserNestedInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: String
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateQuestion {
  _count: QuestionCountAggregate
  _max: QuestionMaxAggregate
  _min: QuestionMinAggregate
}

type AggregateQuestionLikes {
  _count: QuestionLikesCountAggregate
  _max: QuestionLikesMaxAggregate
  _min: QuestionLikesMinAggregate
}

type AggregateQuiz {
  _avg: QuizAvgAggregate
  _count: QuizCountAggregate
  _max: QuizMaxAggregate
  _min: QuizMinAggregate
  _sum: QuizSumAggregate
}

type AggregateQuizLikes {
  _count: QuizLikesCountAggregate
  _max: QuizLikesMaxAggregate
  _min: QuizLikesMinAggregate
}

type AggregateSession {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
}

type AggregateSubmissions {
  _avg: SubmissionsAvgAggregate
  _count: SubmissionsCountAggregate
  _max: SubmissionsMaxAggregate
  _min: SubmissionsMinAggregate
  _sum: SubmissionsSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type AggregateUserCredentials {
  _count: UserCredentialsCountAggregate
  _max: UserCredentialsMaxAggregate
  _min: UserCredentialsMinAggregate
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
}

type AnswerData {
  answer: String!
}

input AnswerDataCompositeFilter {
  equals: AnswerDataObjectEqualityInput
  is: AnswerDataWhereInput
  isNot: AnswerDataWhereInput
}

input AnswerDataCreateEnvelopeInput {
  set: AnswerDataCreateInput
}

input AnswerDataCreateInput {
  answer: String!
}

input AnswerDataObjectEqualityInput {
  answer: String!
}

input AnswerDataOrderByInput {
  answer: SortOrder
}

input AnswerDataUpdateEnvelopeInput {
  set: AnswerDataCreateInput
  update: AnswerDataUpdateInput
}

input AnswerDataUpdateInput {
  answer: StringFieldUpdateOperationsInput
}

input AnswerDataWhereInput {
  AND: [AnswerDataWhereInput!]
  NOT: [AnswerDataWhereInput!]
  OR: [AnswerDataWhereInput!]
  answer: StringFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  isSet: Boolean
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  isSet: Boolean
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type LikeCounter {
  dislikes: Int!
  likes: Int!
}

input LikeCounterCompositeFilter {
  equals: LikeCounterObjectEqualityInput
  is: LikeCounterWhereInput
  isNot: LikeCounterWhereInput
}

input LikeCounterCreateEnvelopeInput {
  set: LikeCounterCreateInput
}

input LikeCounterCreateInput {
  dislikes: Int!
  likes: Int!
}

input LikeCounterObjectEqualityInput {
  dislikes: Int!
  likes: Int!
}

input LikeCounterOrderByInput {
  dislikes: SortOrder
  likes: SortOrder
}

input LikeCounterUpdateEnvelopeInput {
  set: LikeCounterCreateInput
  update: LikeCounterUpdateInput
}

input LikeCounterUpdateInput {
  dislikes: IntFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
}

input LikeCounterWhereInput {
  AND: [LikeCounterWhereInput!]
  NOT: [LikeCounterWhereInput!]
  OR: [LikeCounterWhereInput!]
  dislikes: IntFilter
  likes: IntFilter
}

type Mutation {
  createManyAccount(data: [AccountCreateManyInput!]!): AffectedRowsOutput!
  createManyQuestion(data: [QuestionCreateManyInput!]!): AffectedRowsOutput!
  createManyQuestionLikes(data: [QuestionLikesCreateManyInput!]!): AffectedRowsOutput!
  createManyQuiz(data: [QuizCreateManyInput!]!): AffectedRowsOutput!
  createManyQuizLikes(data: [QuizLikesCreateManyInput!]!): AffectedRowsOutput!
  createManySession(data: [SessionCreateManyInput!]!): AffectedRowsOutput!
  createManySubmissions(data: [SubmissionsCreateManyInput!]!): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!): AffectedRowsOutput!
  createManyUserCredentials(data: [UserCredentialsCreateManyInput!]!): AffectedRowsOutput!
  createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!): AffectedRowsOutput!
  createOneAccount(data: AccountCreateInput!): Account!
  createOneQuestion(data: QuestionCreateInput!): Question!
  createOneQuestionLikes(data: QuestionLikesCreateInput!): QuestionLikes!
  createOneQuiz(data: QuizCreateInput!): Quiz!
  createOneQuizLikes(data: QuizLikesCreateInput!): QuizLikes!
  createOneSession(data: SessionCreateInput!): Session!
  createOneSubmissions(data: SubmissionsCreateInput!): Submissions!
  createOneUser(data: UserCreateInput!): User!
  createOneUserCredentials(data: UserCredentialsCreateInput!): UserCredentials!
  createOneVerificationToken(data: VerificationTokenCreateInput!): VerificationToken!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyQuestion(where: QuestionWhereInput): AffectedRowsOutput!
  deleteManyQuestionLikes(where: QuestionLikesWhereInput): AffectedRowsOutput!
  deleteManyQuiz(where: QuizWhereInput): AffectedRowsOutput!
  deleteManyQuizLikes(where: QuizLikesWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManySubmissions(where: SubmissionsWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUserCredentials(where: UserCredentialsWhereInput): AffectedRowsOutput!
  deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOneQuestion(where: QuestionWhereUniqueInput!): Question
  deleteOneQuestionLikes(where: QuestionLikesWhereUniqueInput!): QuestionLikes
  deleteOneQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteOneQuizLikes(where: QuizLikesWhereUniqueInput!): QuizLikes
  deleteOneSession(where: SessionWhereUniqueInput!): Session
  deleteOneSubmissions(where: SubmissionsWhereUniqueInput!): Submissions
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneUserCredentials(where: UserCredentialsWhereUniqueInput!): UserCredentials
  deleteOneVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyQuestion(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): AffectedRowsOutput!
  updateManyQuestionLikes(data: QuestionLikesUpdateManyMutationInput!, where: QuestionLikesWhereInput): AffectedRowsOutput!
  updateManyQuiz(data: QuizUpdateManyMutationInput!, where: QuizWhereInput): AffectedRowsOutput!
  updateManyQuizLikes(data: QuizLikesUpdateManyMutationInput!, where: QuizLikesWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManySubmissions(data: SubmissionsUpdateManyMutationInput!, where: SubmissionsWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUserCredentials(data: UserCredentialsUpdateManyMutationInput!, where: UserCredentialsWhereInput): AffectedRowsOutput!
  updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOneQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateOneQuestionLikes(data: QuestionLikesUpdateInput!, where: QuestionLikesWhereUniqueInput!): QuestionLikes
  updateOneQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateOneQuizLikes(data: QuizLikesUpdateInput!, where: QuizLikesWhereUniqueInput!): QuizLikes
  updateOneSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateOneSubmissions(data: SubmissionsUpdateInput!, where: SubmissionsWhereUniqueInput!): Submissions
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUserCredentials(data: UserCredentialsUpdateInput!, where: UserCredentialsWhereUniqueInput!): UserCredentials
  updateOneVerificationToken(data: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken
  upsertOneAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneQuestion(create: QuestionCreateInput!, update: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question!
  upsertOneQuestionLikes(create: QuestionLikesCreateInput!, update: QuestionLikesUpdateInput!, where: QuestionLikesWhereUniqueInput!): QuestionLikes!
  upsertOneQuiz(create: QuizCreateInput!, update: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz!
  upsertOneQuizLikes(create: QuizLikesCreateInput!, update: QuizLikesUpdateInput!, where: QuizLikesWhereUniqueInput!): QuizLikes!
  upsertOneSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertOneSubmissions(create: SubmissionsCreateInput!, update: SubmissionsUpdateInput!, where: SubmissionsWhereUniqueInput!): Submissions!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserCredentials(create: UserCredentialsCreateInput!, update: UserCredentialsUpdateInput!, where: UserCredentialsWhereUniqueInput!): UserCredentials!
  upsertOneVerificationToken(create: VerificationTokenCreateInput!, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  isSet: Boolean
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  isSet: Boolean
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  isSet: Boolean
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
  unset: Boolean
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
  unset: Boolean
}

input NullableStringFieldUpdateOperationsInput {
  set: String
  unset: Boolean
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateQuestion(cursor: QuestionWhereUniqueInput, orderBy: [QuestionOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionWhereInput): AggregateQuestion!
  aggregateQuestionLikes(cursor: QuestionLikesWhereUniqueInput, orderBy: [QuestionLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionLikesWhereInput): AggregateQuestionLikes!
  aggregateQuiz(cursor: QuizWhereUniqueInput, orderBy: [QuizOrderByWithRelationInput!], skip: Int, take: Int, where: QuizWhereInput): AggregateQuiz!
  aggregateQuizLikes(cursor: QuizLikesWhereUniqueInput, orderBy: [QuizLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuizLikesWhereInput): AggregateQuizLikes!
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateSubmissions(cursor: SubmissionsWhereUniqueInput, orderBy: [SubmissionsOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionsWhereInput): AggregateSubmissions!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUserCredentials(cursor: UserCredentialsWhereUniqueInput, orderBy: [UserCredentialsOrderByWithRelationInput!], skip: Int, take: Int, where: UserCredentialsWhereInput): AggregateUserCredentials!
  aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAccountOrThrow(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstQuestion(cursor: QuestionWhereUniqueInput, distinct: [QuestionScalarFieldEnum!], orderBy: [QuestionOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionWhereInput): Question
  findFirstQuestionLikes(cursor: QuestionLikesWhereUniqueInput, distinct: [QuestionLikesScalarFieldEnum!], orderBy: [QuestionLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionLikesWhereInput): QuestionLikes
  findFirstQuestionLikesOrThrow(cursor: QuestionLikesWhereUniqueInput, distinct: [QuestionLikesScalarFieldEnum!], orderBy: [QuestionLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionLikesWhereInput): QuestionLikes
  findFirstQuestionOrThrow(cursor: QuestionWhereUniqueInput, distinct: [QuestionScalarFieldEnum!], orderBy: [QuestionOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionWhereInput): Question
  findFirstQuiz(cursor: QuizWhereUniqueInput, distinct: [QuizScalarFieldEnum!], orderBy: [QuizOrderByWithRelationInput!], skip: Int, take: Int, where: QuizWhereInput): Quiz
  findFirstQuizLikes(cursor: QuizLikesWhereUniqueInput, distinct: [QuizLikesScalarFieldEnum!], orderBy: [QuizLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuizLikesWhereInput): QuizLikes
  findFirstQuizLikesOrThrow(cursor: QuizLikesWhereUniqueInput, distinct: [QuizLikesScalarFieldEnum!], orderBy: [QuizLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuizLikesWhereInput): QuizLikes
  findFirstQuizOrThrow(cursor: QuizWhereUniqueInput, distinct: [QuizScalarFieldEnum!], orderBy: [QuizOrderByWithRelationInput!], skip: Int, take: Int, where: QuizWhereInput): Quiz
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSessionOrThrow(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSubmissions(cursor: SubmissionsWhereUniqueInput, distinct: [SubmissionsScalarFieldEnum!], orderBy: [SubmissionsOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionsWhereInput): Submissions
  findFirstSubmissionsOrThrow(cursor: SubmissionsWhereUniqueInput, distinct: [SubmissionsScalarFieldEnum!], orderBy: [SubmissionsOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionsWhereInput): Submissions
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserCredentials(cursor: UserCredentialsWhereUniqueInput, distinct: [UserCredentialsScalarFieldEnum!], orderBy: [UserCredentialsOrderByWithRelationInput!], skip: Int, take: Int, where: UserCredentialsWhereInput): UserCredentials
  findFirstUserCredentialsOrThrow(cursor: UserCredentialsWhereUniqueInput, distinct: [UserCredentialsScalarFieldEnum!], orderBy: [UserCredentialsOrderByWithRelationInput!], skip: Int, take: Int, where: UserCredentialsWhereInput): UserCredentials
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstVerificationTokenOrThrow(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findManyQuestionLikes(cursor: QuestionLikesWhereUniqueInput, distinct: [QuestionLikesScalarFieldEnum!], orderBy: [QuestionLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionLikesWhereInput): [QuestionLikes!]!
  findManyQuizLikes(cursor: QuizLikesWhereUniqueInput, distinct: [QuizLikesScalarFieldEnum!], orderBy: [QuizLikesOrderByWithRelationInput!], skip: Int, take: Int, where: QuizLikesWhereInput): [QuizLikes!]!
  findManySubmissions(cursor: SubmissionsWhereUniqueInput, distinct: [SubmissionsScalarFieldEnum!], orderBy: [SubmissionsOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionsWhereInput): [Submissions!]!
  findManyUserCredentials(cursor: UserCredentialsWhereUniqueInput, distinct: [UserCredentialsScalarFieldEnum!], orderBy: [UserCredentialsOrderByWithRelationInput!], skip: Int, take: Int, where: UserCredentialsWhereInput): [UserCredentials!]!
  findUniqueQuestionLikes(where: QuestionLikesWhereUniqueInput!): QuestionLikes
  findUniqueQuestionLikesOrThrow(where: QuestionLikesWhereUniqueInput!): QuestionLikes
  findUniqueQuizLikes(where: QuizLikesWhereUniqueInput!): QuizLikes
  findUniqueQuizLikesOrThrow(where: QuizLikesWhereUniqueInput!): QuizLikes
  findUniqueSubmissions(where: SubmissionsWhereUniqueInput!): Submissions
  findUniqueSubmissionsOrThrow(where: SubmissionsWhereUniqueInput!): Submissions
  findUniqueUserCredentials(where: UserCredentialsWhereUniqueInput!): UserCredentials
  findUniqueUserCredentialsOrThrow(where: UserCredentialsWhereUniqueInput!): UserCredentials
  getAccount(where: AccountWhereUniqueInput!): Account
  getQuestion(where: QuestionWhereUniqueInput!): Question
  getQuiz(where: QuizWhereUniqueInput!): Quiz
  getSession(where: SessionWhereUniqueInput!): Session
  getUser(where: UserWhereUniqueInput!): User
  getVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByQuestion(by: [QuestionScalarFieldEnum!]!, having: QuestionScalarWhereWithAggregatesInput, orderBy: [QuestionOrderByWithAggregationInput!], skip: Int, take: Int, where: QuestionWhereInput): [QuestionGroupBy!]!
  groupByQuestionLikes(by: [QuestionLikesScalarFieldEnum!]!, having: QuestionLikesScalarWhereWithAggregatesInput, orderBy: [QuestionLikesOrderByWithAggregationInput!], skip: Int, take: Int, where: QuestionLikesWhereInput): [QuestionLikesGroupBy!]!
  groupByQuiz(by: [QuizScalarFieldEnum!]!, having: QuizScalarWhereWithAggregatesInput, orderBy: [QuizOrderByWithAggregationInput!], skip: Int, take: Int, where: QuizWhereInput): [QuizGroupBy!]!
  groupByQuizLikes(by: [QuizLikesScalarFieldEnum!]!, having: QuizLikesScalarWhereWithAggregatesInput, orderBy: [QuizLikesOrderByWithAggregationInput!], skip: Int, take: Int, where: QuizLikesWhereInput): [QuizLikesGroupBy!]!
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupBySubmissions(by: [SubmissionsScalarFieldEnum!]!, having: SubmissionsScalarWhereWithAggregatesInput, orderBy: [SubmissionsOrderByWithAggregationInput!], skip: Int, take: Int, where: SubmissionsWhereInput): [SubmissionsGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByUserCredentials(by: [UserCredentialsScalarFieldEnum!]!, having: UserCredentialsScalarWhereWithAggregatesInput, orderBy: [UserCredentialsOrderByWithAggregationInput!], skip: Int, take: Int, where: UserCredentialsWhereInput): [UserCredentialsGroupBy!]!
  groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
  question(where: QuestionWhereUniqueInput!): Question
  questions(cursor: QuestionWhereUniqueInput, distinct: [QuestionScalarFieldEnum!], orderBy: [QuestionOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionWhereInput): [Question!]!
  quiz(where: QuizWhereUniqueInput!): Quiz
  quizzes(cursor: QuizWhereUniqueInput, distinct: [QuizScalarFieldEnum!], orderBy: [QuizOrderByWithRelationInput!], skip: Int, take: Int, where: QuizWhereInput): [Quiz!]!
  session(where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
}

enum QueryMode {
  default
  insensitive
}

type Question {
  answer: AnswerData!
  creatorId: String!
  dateCreated: DateTimeISO!
  id: String!
  likeCounter: LikeCounter!
  question: QuestionData!
  questionType: String!
  tags: [String!]!
}

type QuestionCountAggregate {
  _all: Int!
  creatorId: Int!
  dateCreated: Int!
  id: Int!
  questionType: Int!
  tags: Int!
}

input QuestionCountOrderByAggregateInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  questionType: SortOrder
  tags: SortOrder
}

input QuestionCreateInput {
  answer: AnswerDataCreateEnvelopeInput!
  creatorId: String!
  dateCreated: DateTimeISO
  id: String
  likeCounter: LikeCounterCreateEnvelopeInput!
  question: QuestionDataCreateEnvelopeInput!
  questionType: String!
  tags: QuestionCreatetagsInput
}

input QuestionCreateManyInput {
  answer: AnswerDataCreateEnvelopeInput!
  creatorId: String!
  dateCreated: DateTimeISO
  id: String
  likeCounter: LikeCounterCreateEnvelopeInput!
  question: QuestionDataCreateEnvelopeInput!
  questionType: String!
  tags: QuestionCreatetagsInput
}

input QuestionCreatetagsInput {
  set: [String!]!
}

type QuestionData {
  description: String!
  title: String!
}

input QuestionDataCompositeFilter {
  equals: QuestionDataObjectEqualityInput
  is: QuestionDataWhereInput
  isNot: QuestionDataWhereInput
}

input QuestionDataCreateEnvelopeInput {
  set: QuestionDataCreateInput
}

input QuestionDataCreateInput {
  description: String!
  title: String!
}

input QuestionDataObjectEqualityInput {
  description: String!
  title: String!
}

input QuestionDataOrderByInput {
  description: SortOrder
  title: SortOrder
}

input QuestionDataUpdateEnvelopeInput {
  set: QuestionDataCreateInput
  update: QuestionDataUpdateInput
}

input QuestionDataUpdateInput {
  description: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input QuestionDataWhereInput {
  AND: [QuestionDataWhereInput!]
  NOT: [QuestionDataWhereInput!]
  OR: [QuestionDataWhereInput!]
  description: StringFilter
  title: StringFilter
}

type QuestionGroupBy {
  _count: QuestionCountAggregate
  _max: QuestionMaxAggregate
  _min: QuestionMinAggregate
  creatorId: String!
  dateCreated: DateTimeISO!
  id: String!
  questionType: String!
  tags: [String!]
}

type QuestionLikes {
  dateCreated: DateTimeISO!
  id: String!
  questionId: String!
  userId: String!
}

type QuestionLikesCountAggregate {
  _all: Int!
  dateCreated: Int!
  id: Int!
  questionId: Int!
  userId: Int!
}

input QuestionLikesCountOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

input QuestionLikesCreateInput {
  dateCreated: DateTimeISO
  id: String
  questionId: String!
  userId: String!
}

input QuestionLikesCreateManyInput {
  dateCreated: DateTimeISO
  id: String
  questionId: String!
  userId: String!
}

type QuestionLikesGroupBy {
  _count: QuestionLikesCountAggregate
  _max: QuestionLikesMaxAggregate
  _min: QuestionLikesMinAggregate
  dateCreated: DateTimeISO!
  id: String!
  questionId: String!
  userId: String!
}

type QuestionLikesMaxAggregate {
  dateCreated: DateTimeISO
  id: String
  questionId: String
  userId: String
}

input QuestionLikesMaxOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

type QuestionLikesMinAggregate {
  dateCreated: DateTimeISO
  id: String
  questionId: String
  userId: String
}

input QuestionLikesMinOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

input QuestionLikesOrderByWithAggregationInput {
  _count: QuestionLikesCountOrderByAggregateInput
  _max: QuestionLikesMaxOrderByAggregateInput
  _min: QuestionLikesMinOrderByAggregateInput
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

input QuestionLikesOrderByWithRelationInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

enum QuestionLikesScalarFieldEnum {
  dateCreated
  id
  questionId
  userId
}

input QuestionLikesScalarWhereWithAggregatesInput {
  AND: [QuestionLikesScalarWhereWithAggregatesInput!]
  NOT: [QuestionLikesScalarWhereWithAggregatesInput!]
  OR: [QuestionLikesScalarWhereWithAggregatesInput!]
  dateCreated: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  questionId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input QuestionLikesUpdateInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input QuestionLikesUpdateManyMutationInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input QuestionLikesWhereInput {
  AND: [QuestionLikesWhereInput!]
  NOT: [QuestionLikesWhereInput!]
  OR: [QuestionLikesWhereInput!]
  dateCreated: DateTimeFilter
  id: StringFilter
  questionId: StringFilter
  userId: StringFilter
}

input QuestionLikesWhereUniqueInput {
  AND: [QuestionLikesWhereInput!]
  NOT: [QuestionLikesWhereInput!]
  OR: [QuestionLikesWhereInput!]
  dateCreated: DateTimeFilter
  id: String
  questionId: String
  userId: String
}

type QuestionMaxAggregate {
  creatorId: String
  dateCreated: DateTimeISO
  id: String
  questionType: String
}

input QuestionMaxOrderByAggregateInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  questionType: SortOrder
}

type QuestionMinAggregate {
  creatorId: String
  dateCreated: DateTimeISO
  id: String
  questionType: String
}

input QuestionMinOrderByAggregateInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  questionType: SortOrder
}

input QuestionOrderByWithAggregationInput {
  _count: QuestionCountOrderByAggregateInput
  _max: QuestionMaxOrderByAggregateInput
  _min: QuestionMinOrderByAggregateInput
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  questionType: SortOrder
  tags: SortOrder
}

input QuestionOrderByWithRelationInput {
  answer: AnswerDataOrderByInput
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  likeCounter: LikeCounterOrderByInput
  question: QuestionDataOrderByInput
  questionType: SortOrder
  tags: SortOrder
}

enum QuestionScalarFieldEnum {
  creatorId
  dateCreated
  id
  questionType
  tags
}

input QuestionScalarWhereWithAggregatesInput {
  AND: [QuestionScalarWhereWithAggregatesInput!]
  NOT: [QuestionScalarWhereWithAggregatesInput!]
  OR: [QuestionScalarWhereWithAggregatesInput!]
  creatorId: StringWithAggregatesFilter
  dateCreated: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  questionType: StringWithAggregatesFilter
  tags: StringNullableListFilter
}

input QuestionUpdateInput {
  answer: AnswerDataUpdateEnvelopeInput
  creatorId: StringFieldUpdateOperationsInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  likeCounter: LikeCounterUpdateEnvelopeInput
  question: QuestionDataUpdateEnvelopeInput
  questionType: StringFieldUpdateOperationsInput
  tags: QuestionUpdatetagsInput
}

input QuestionUpdateManyMutationInput {
  answer: AnswerDataUpdateEnvelopeInput
  creatorId: StringFieldUpdateOperationsInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  likeCounter: LikeCounterUpdateEnvelopeInput
  question: QuestionDataUpdateEnvelopeInput
  questionType: StringFieldUpdateOperationsInput
  tags: QuestionUpdatetagsInput
}

input QuestionUpdatetagsInput {
  push: [String!]
  set: [String!]
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  answer: AnswerDataCompositeFilter
  creatorId: StringFilter
  dateCreated: DateTimeFilter
  id: StringFilter
  likeCounter: LikeCounterCompositeFilter
  question: QuestionDataCompositeFilter
  questionType: StringFilter
  tags: StringNullableListFilter
}

input QuestionWhereUniqueInput {
  AND: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  answer: AnswerDataCompositeFilter
  creatorId: StringFilter
  dateCreated: DateTimeFilter
  id: String
  likeCounter: LikeCounterCompositeFilter
  question: QuestionDataCompositeFilter
  questionType: StringFilter
  tags: StringNullableListFilter
}

type Quiz {
  creatorId: String!
  dateCreated: DateTimeISO!
  id: String!
  likes: Int!
  name: String!
  questionIds: [String!]!
  tags: String!
}

type QuizAvgAggregate {
  likes: Float
}

input QuizAvgOrderByAggregateInput {
  likes: SortOrder
}

type QuizCountAggregate {
  _all: Int!
  creatorId: Int!
  dateCreated: Int!
  id: Int!
  likes: Int!
  name: Int!
  questionIds: Int!
  tags: Int!
}

input QuizCountOrderByAggregateInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  likes: SortOrder
  name: SortOrder
  questionIds: SortOrder
  tags: SortOrder
}

input QuizCreateInput {
  creatorId: String!
  dateCreated: DateTimeISO
  id: String
  likes: Int!
  name: String!
  questionIds: QuizCreatequestionIdsInput
  tags: String!
}

input QuizCreateManyInput {
  creatorId: String!
  dateCreated: DateTimeISO
  id: String
  likes: Int!
  name: String!
  questionIds: QuizCreatequestionIdsInput
  tags: String!
}

input QuizCreatequestionIdsInput {
  set: [String!]!
}

type QuizGroupBy {
  _avg: QuizAvgAggregate
  _count: QuizCountAggregate
  _max: QuizMaxAggregate
  _min: QuizMinAggregate
  _sum: QuizSumAggregate
  creatorId: String!
  dateCreated: DateTimeISO!
  id: String!
  likes: Int!
  name: String!
  questionIds: [String!]
  tags: String!
}

type QuizLikes {
  dateCreated: DateTimeISO!
  id: String!
  questionId: String!
  userId: String!
}

type QuizLikesCountAggregate {
  _all: Int!
  dateCreated: Int!
  id: Int!
  questionId: Int!
  userId: Int!
}

input QuizLikesCountOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

input QuizLikesCreateInput {
  dateCreated: DateTimeISO
  id: String
  questionId: String!
  userId: String!
}

input QuizLikesCreateManyInput {
  dateCreated: DateTimeISO
  id: String
  questionId: String!
  userId: String!
}

type QuizLikesGroupBy {
  _count: QuizLikesCountAggregate
  _max: QuizLikesMaxAggregate
  _min: QuizLikesMinAggregate
  dateCreated: DateTimeISO!
  id: String!
  questionId: String!
  userId: String!
}

type QuizLikesMaxAggregate {
  dateCreated: DateTimeISO
  id: String
  questionId: String
  userId: String
}

input QuizLikesMaxOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

type QuizLikesMinAggregate {
  dateCreated: DateTimeISO
  id: String
  questionId: String
  userId: String
}

input QuizLikesMinOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

input QuizLikesOrderByWithAggregationInput {
  _count: QuizLikesCountOrderByAggregateInput
  _max: QuizLikesMaxOrderByAggregateInput
  _min: QuizLikesMinOrderByAggregateInput
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

input QuizLikesOrderByWithRelationInput {
  dateCreated: SortOrder
  id: SortOrder
  questionId: SortOrder
  userId: SortOrder
}

enum QuizLikesScalarFieldEnum {
  dateCreated
  id
  questionId
  userId
}

input QuizLikesScalarWhereWithAggregatesInput {
  AND: [QuizLikesScalarWhereWithAggregatesInput!]
  NOT: [QuizLikesScalarWhereWithAggregatesInput!]
  OR: [QuizLikesScalarWhereWithAggregatesInput!]
  dateCreated: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  questionId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input QuizLikesUpdateInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input QuizLikesUpdateManyMutationInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  questionId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input QuizLikesWhereInput {
  AND: [QuizLikesWhereInput!]
  NOT: [QuizLikesWhereInput!]
  OR: [QuizLikesWhereInput!]
  dateCreated: DateTimeFilter
  id: StringFilter
  questionId: StringFilter
  userId: StringFilter
}

input QuizLikesWhereUniqueInput {
  AND: [QuizLikesWhereInput!]
  NOT: [QuizLikesWhereInput!]
  OR: [QuizLikesWhereInput!]
  dateCreated: DateTimeFilter
  id: String
  questionId: String
  userId: String
}

type QuizMaxAggregate {
  creatorId: String
  dateCreated: DateTimeISO
  id: String
  likes: Int
  name: String
  tags: String
}

input QuizMaxOrderByAggregateInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  likes: SortOrder
  name: SortOrder
  tags: SortOrder
}

type QuizMinAggregate {
  creatorId: String
  dateCreated: DateTimeISO
  id: String
  likes: Int
  name: String
  tags: String
}

input QuizMinOrderByAggregateInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  likes: SortOrder
  name: SortOrder
  tags: SortOrder
}

input QuizOrderByWithAggregationInput {
  _avg: QuizAvgOrderByAggregateInput
  _count: QuizCountOrderByAggregateInput
  _max: QuizMaxOrderByAggregateInput
  _min: QuizMinOrderByAggregateInput
  _sum: QuizSumOrderByAggregateInput
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  likes: SortOrder
  name: SortOrder
  questionIds: SortOrder
  tags: SortOrder
}

input QuizOrderByWithRelationInput {
  creatorId: SortOrder
  dateCreated: SortOrder
  id: SortOrder
  likes: SortOrder
  name: SortOrder
  questionIds: SortOrder
  tags: SortOrder
}

enum QuizScalarFieldEnum {
  creatorId
  dateCreated
  id
  likes
  name
  questionIds
  tags
}

input QuizScalarWhereWithAggregatesInput {
  AND: [QuizScalarWhereWithAggregatesInput!]
  NOT: [QuizScalarWhereWithAggregatesInput!]
  OR: [QuizScalarWhereWithAggregatesInput!]
  creatorId: StringWithAggregatesFilter
  dateCreated: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  likes: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  questionIds: StringNullableListFilter
  tags: StringWithAggregatesFilter
}

type QuizSumAggregate {
  likes: Int
}

input QuizSumOrderByAggregateInput {
  likes: SortOrder
}

input QuizUpdateInput {
  creatorId: StringFieldUpdateOperationsInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  questionIds: QuizUpdatequestionIdsInput
  tags: StringFieldUpdateOperationsInput
}

input QuizUpdateManyMutationInput {
  creatorId: StringFieldUpdateOperationsInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  questionIds: QuizUpdatequestionIdsInput
  tags: StringFieldUpdateOperationsInput
}

input QuizUpdatequestionIdsInput {
  push: [String!]
  set: [String!]
}

input QuizWhereInput {
  AND: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  creatorId: StringFilter
  dateCreated: DateTimeFilter
  id: StringFilter
  likes: IntFilter
  name: StringFilter
  questionIds: StringNullableListFilter
  tags: StringFilter
}

input QuizWhereUniqueInput {
  AND: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  creatorId: String
  dateCreated: DateTimeFilter
  id: String
  likes: IntFilter
  name: StringFilter
  questionIds: StringNullableListFilter
  tags: StringFilter
}

type Session {
  expires: DateTimeISO!
  id: String!
  sessionToken: String!
  user: User!
  userId: String!
}

type SessionCountAggregate {
  _all: Int!
  expires: Int!
  id: Int!
  sessionToken: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  expires: DateTimeISO!
  id: String
  sessionToken: String!
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  expires: DateTimeISO!
  id: String
  sessionToken: String!
  userId: String!
}

input SessionCreateManyUserInput {
  expires: DateTimeISO!
  id: String
  sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expires: DateTimeISO!
  id: String
  sessionToken: String!
}

type SessionGroupBy {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  expires: DateTimeISO!
  id: String!
  sessionToken: String!
  userId: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregate {
  expires: DateTimeISO
  id: String
  sessionToken: String
  userId: String
}

input SessionMaxOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

type SessionMinAggregate {
  expires: DateTimeISO
  id: String
  sessionToken: String
  userId: String
}

input SessionMinOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithAggregationInput {
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  expires
  id
  sessionToken
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsNestedInput
}

input SessionUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserNestedInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expires: DateTimeFilter
  id: String
  sessionToken: String
  user: UserRelationFilter
  userId: StringFilter
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Submissions {
  dateCreated: DateTimeISO!
  id: String!
  quizId: String!
  score: Int!
  time: DateTimeISO!
  userId: String!
}

type SubmissionsAvgAggregate {
  score: Float
}

input SubmissionsAvgOrderByAggregateInput {
  score: SortOrder
}

type SubmissionsCountAggregate {
  _all: Int!
  dateCreated: Int!
  id: Int!
  quizId: Int!
  score: Int!
  time: Int!
  userId: Int!
}

input SubmissionsCountOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  quizId: SortOrder
  score: SortOrder
  time: SortOrder
  userId: SortOrder
}

input SubmissionsCreateInput {
  dateCreated: DateTimeISO
  id: String
  quizId: String!
  score: Int!
  time: DateTimeISO
  userId: String!
}

input SubmissionsCreateManyInput {
  dateCreated: DateTimeISO
  id: String
  quizId: String!
  score: Int!
  time: DateTimeISO
  userId: String!
}

type SubmissionsGroupBy {
  _avg: SubmissionsAvgAggregate
  _count: SubmissionsCountAggregate
  _max: SubmissionsMaxAggregate
  _min: SubmissionsMinAggregate
  _sum: SubmissionsSumAggregate
  dateCreated: DateTimeISO!
  id: String!
  quizId: String!
  score: Int!
  time: DateTimeISO!
  userId: String!
}

type SubmissionsMaxAggregate {
  dateCreated: DateTimeISO
  id: String
  quizId: String
  score: Int
  time: DateTimeISO
  userId: String
}

input SubmissionsMaxOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  quizId: SortOrder
  score: SortOrder
  time: SortOrder
  userId: SortOrder
}

type SubmissionsMinAggregate {
  dateCreated: DateTimeISO
  id: String
  quizId: String
  score: Int
  time: DateTimeISO
  userId: String
}

input SubmissionsMinOrderByAggregateInput {
  dateCreated: SortOrder
  id: SortOrder
  quizId: SortOrder
  score: SortOrder
  time: SortOrder
  userId: SortOrder
}

input SubmissionsOrderByWithAggregationInput {
  _avg: SubmissionsAvgOrderByAggregateInput
  _count: SubmissionsCountOrderByAggregateInput
  _max: SubmissionsMaxOrderByAggregateInput
  _min: SubmissionsMinOrderByAggregateInput
  _sum: SubmissionsSumOrderByAggregateInput
  dateCreated: SortOrder
  id: SortOrder
  quizId: SortOrder
  score: SortOrder
  time: SortOrder
  userId: SortOrder
}

input SubmissionsOrderByWithRelationInput {
  dateCreated: SortOrder
  id: SortOrder
  quizId: SortOrder
  score: SortOrder
  time: SortOrder
  userId: SortOrder
}

enum SubmissionsScalarFieldEnum {
  dateCreated
  id
  quizId
  score
  time
  userId
}

input SubmissionsScalarWhereWithAggregatesInput {
  AND: [SubmissionsScalarWhereWithAggregatesInput!]
  NOT: [SubmissionsScalarWhereWithAggregatesInput!]
  OR: [SubmissionsScalarWhereWithAggregatesInput!]
  dateCreated: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  quizId: StringWithAggregatesFilter
  score: IntWithAggregatesFilter
  time: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type SubmissionsSumAggregate {
  score: Int
}

input SubmissionsSumOrderByAggregateInput {
  score: SortOrder
}

input SubmissionsUpdateInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  quizId: StringFieldUpdateOperationsInput
  score: IntFieldUpdateOperationsInput
  time: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SubmissionsUpdateManyMutationInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  quizId: StringFieldUpdateOperationsInput
  score: IntFieldUpdateOperationsInput
  time: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SubmissionsWhereInput {
  AND: [SubmissionsWhereInput!]
  NOT: [SubmissionsWhereInput!]
  OR: [SubmissionsWhereInput!]
  dateCreated: DateTimeFilter
  id: StringFilter
  quizId: StringFilter
  score: IntFilter
  time: DateTimeFilter
  userId: StringFilter
}

input SubmissionsWhereUniqueInput {
  AND: [SubmissionsWhereInput!]
  NOT: [SubmissionsWhereInput!]
  OR: [SubmissionsWhereInput!]
  dateCreated: DateTimeFilter
  id: String
  quizId: String
  score: IntFilter
  time: DateTimeFilter
  userId: String
}

type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  dateCreated: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  id: String!
  image: String
  name: String!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  usersReached: Int!
}

type UserAvgAggregate {
  usersReached: Float
}

input UserAvgOrderByAggregateInput {
  usersReached: SortOrder
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  sessions(where: SessionWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  dateCreated: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  name: Int!
  usersReached: Int!
}

input UserCountOrderByAggregateInput {
  dateCreated: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  usersReached: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  dateCreated: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String!
  sessions: SessionCreateNestedManyWithoutUserInput
  usersReached: Int
}

input UserCreateManyInput {
  dateCreated: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String!
  usersReached: Int
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  dateCreated: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String!
  sessions: SessionCreateNestedManyWithoutUserInput
  usersReached: Int
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  dateCreated: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String!
  usersReached: Int
}

type UserCredentials {
  email: String!
  id: String!
  password: String
  provider: String!
  userId: String!
}

type UserCredentialsCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
  password: Int!
  provider: Int!
  userId: Int!
}

input UserCredentialsCountOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
  provider: SortOrder
  userId: SortOrder
}

input UserCredentialsCreateInput {
  email: String!
  id: String
  password: String
  provider: String!
  userId: String!
}

input UserCredentialsCreateManyInput {
  email: String!
  id: String
  password: String
  provider: String!
  userId: String!
}

type UserCredentialsGroupBy {
  _count: UserCredentialsCountAggregate
  _max: UserCredentialsMaxAggregate
  _min: UserCredentialsMinAggregate
  email: String!
  id: String!
  password: String
  provider: String!
  userId: String!
}

type UserCredentialsMaxAggregate {
  email: String
  id: String
  password: String
  provider: String
  userId: String
}

input UserCredentialsMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
  provider: SortOrder
  userId: SortOrder
}

type UserCredentialsMinAggregate {
  email: String
  id: String
  password: String
  provider: String
  userId: String
}

input UserCredentialsMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
  provider: SortOrder
  userId: SortOrder
}

input UserCredentialsOrderByWithAggregationInput {
  _count: UserCredentialsCountOrderByAggregateInput
  _max: UserCredentialsMaxOrderByAggregateInput
  _min: UserCredentialsMinOrderByAggregateInput
  email: SortOrder
  id: SortOrder
  password: SortOrder
  provider: SortOrder
  userId: SortOrder
}

input UserCredentialsOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
  provider: SortOrder
  userId: SortOrder
}

enum UserCredentialsScalarFieldEnum {
  email
  id
  password
  provider
  userId
}

input UserCredentialsScalarWhereWithAggregatesInput {
  AND: [UserCredentialsScalarWhereWithAggregatesInput!]
  NOT: [UserCredentialsScalarWhereWithAggregatesInput!]
  OR: [UserCredentialsScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input UserCredentialsUpdateInput {
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserCredentialsUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserCredentialsWhereInput {
  AND: [UserCredentialsWhereInput!]
  NOT: [UserCredentialsWhereInput!]
  OR: [UserCredentialsWhereInput!]
  email: StringFilter
  id: StringFilter
  password: StringNullableFilter
  provider: StringFilter
  userId: StringFilter
}

input UserCredentialsWhereUniqueInput {
  AND: [UserCredentialsWhereInput!]
  NOT: [UserCredentialsWhereInput!]
  OR: [UserCredentialsWhereInput!]
  email: String
  id: String
  password: StringNullableFilter
  provider: StringFilter
  userId: String
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  dateCreated: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  id: String!
  image: String
  name: String!
  usersReached: Int!
}

type UserMaxAggregate {
  dateCreated: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  usersReached: Int
}

input UserMaxOrderByAggregateInput {
  dateCreated: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  usersReached: SortOrder
}

type UserMinAggregate {
  dateCreated: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  usersReached: Int
}

input UserMinOrderByAggregateInput {
  dateCreated: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  usersReached: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  dateCreated: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  usersReached: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  dateCreated: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  sessions: SessionOrderByRelationAggregateInput
  usersReached: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  dateCreated
  email
  emailVerified
  id
  image
  name
  usersReached
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  dateCreated: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  usersReached: IntWithAggregatesFilter
}

type UserSumAggregate {
  usersReached: Int
}

input UserSumOrderByAggregateInput {
  usersReached: SortOrder
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  usersReached: IntFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  usersReached: IntFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutSessionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
  update: UserUpdateToOneWithWhereWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  data: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSessionsInput {
  data: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  dateCreated: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  usersReached: IntFieldUpdateOperationsInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  usersReached: IntFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  update: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  dateCreated: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringFilter
  sessions: SessionListRelationFilter
  usersReached: IntFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  dateCreated: DateTimeFilter
  email: String
  emailVerified: DateTimeNullableFilter
  id: String
  image: StringNullableFilter
  name: StringFilter
  sessions: SessionListRelationFilter
  usersReached: IntFilter
}

type VerificationToken {
  expires: DateTimeISO!
  id: String!
  identifier: String!
  token: String!
}

type VerificationTokenCountAggregate {
  _all: Int!
  expires: Int!
  id: Int!
  identifier: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  expires: DateTimeISO!
  id: String
  identifier: String!
  token: String!
}

input VerificationTokenCreateManyInput {
  expires: DateTimeISO!
  id: String
  identifier: String!
  token: String!
}

type VerificationTokenGroupBy {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
  expires: DateTimeISO!
  id: String!
  identifier: String!
  token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationTokenMaxAggregate {
  expires: DateTimeISO
  id: String
  identifier: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregate {
  expires: DateTimeISO
  id: String
  identifier: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  expires
  id
  identifier
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput!]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
  OR: [VerificationTokenScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  identifier: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  id: String
  identifier: StringFilter
  identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
  token: String
}