import "reflect-metadata";
import { ApolloServer } from "@apollo/server";
import { allResolvers } from "../../../../graphql/index"; // Custom resolvers
import { resolvers } from "../../../../prisma/generated/type-graphql"; // Auto-generated resolvers
import { startServerAndCreateNextHandler } from "@as-integrations/next";
import { prismaDb } from "@/app/util/prisma/connection";
import { buildSchema } from "type-graphql";
import { getServerSession } from "next-auth";
import { authOptions } from "../auth/[...nextauth]/route";
import { Session } from "next-auth";
import { getSession } from "next-auth/react";
import { ApolloServerPluginLandingPageGraphQLPlayground } from "@apollo/server-plugin-landing-page-graphql-playground";
import { NextApiRequest } from "next";

const session = getServerSession(authOptions);
console.log("------------OUTSIDE SUCCESS-------------");
console.log({ session });
console.log("------------SUCCESS-------------");

export async function createSchema() {
  const schema = await buildSchema({
    resolvers: allResolvers, // Custom resolvers
    // resolvers, // Auto-generated resolvers
    emitSchemaFile: true,
  });
  return schema;
}
const server = new ApolloServer({
  schema: await createSchema(),
  plugins: [ApolloServerPluginLandingPageGraphQLPlayground()],
});
const main = startServerAndCreateNextHandler<NextApiRequest>(server, {
  context: async (req, res) => {
    // //for testing only, but when writing custom resolver, call the connect function
    // prismaDb.$connect();
    // // let session: Session | null = null;
    // let contextData;
    // try {
    //   const session = await getServerSession(req, res, authOptions);
    //   console.log("------------SUCCESS------------- ");
    //   console.log({ session });
    //   console.log("------------SUCCESS------------- ");
    // } catch (e) {
    //   console.log("------------------------------------------------");
    //   console.log("e: " + e);
    //   console.log("------------------------------------------------");
    //   // session = null;
    // }
    // // contextData = {
    // //   req,
    // //   res,
    // //   prisma: prismaDb,
    // //   session: session,
    // // };
    // // console.log("contextData: " + contextData);
    // contextData = {
    //   req,
    //   res,
    //   prisma: prismaDb,
    //   session: null,
    // };
    // return contextData;

    const session = await getServerSession(authOptions);
    console.log("------------SUCCESS-------------");
    console.log({ session });
    console.log("------------SUCCESS-------------");
    let contextData;
        prismaDb.$connect();
    contextData = {
      req,
      res,
      prisma: prismaDb,
      session: null,
    };
    return contextData;
  },
});
export default main;
